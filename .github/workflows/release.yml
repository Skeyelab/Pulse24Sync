name: Create Release

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v1.0.0, v1.2.3, etc.

jobs:
  build-and-release:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macOS, Windows]
        include:
          - os: macOS
            artifact-name: macos-builds
            build-path: |
              Builds/MacOSX/build/Release/Pulse24Sync.vst3
              Builds/MacOSX/build/Release/Pulse24Sync.component
              Builds/MacOSX/build/Release/Pulse24Sync.app
          - os: Windows
            artifact-name: windows-builds
            build-path: |
              Builds/VisualStudio2022/x64/Release/Pulse24Sync.vst3
              Builds/VisualStudio2022/x64/Release/Pulse24Sync.exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Try to download pre-built artifacts from recent successful builds
      - name: Check for existing build artifacts
        id: check_artifacts
        continue-on-error: true
        run: |
          echo "current_hash=${{ hashFiles('Pulse24Sync.jucer', 'Source/**') }}" >> $GITHUB_OUTPUT
          echo "Checking for cached artifacts for commit: ${{ github.sha }}"
          echo "Source hash: ${{ hashFiles('Pulse24Sync.jucer', 'Source/**') }}"

      - name: Download cached build artifacts
        id: download_artifacts
        continue-on-error: true
        uses: actions/github-script@v7
        with:
          script: |
            // Look for artifacts from recent workflow runs that match our commit
            const runs = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'build.yml',
              status: 'completed',
              conclusion: 'success',
              per_page: 50
            });

            console.log(`Found ${runs.data.workflow_runs.length} successful build runs`);

            for (const run of runs.data.workflow_runs) {
              if (run.head_sha === '${{ github.sha }}') {
                console.log(`Found matching run for SHA: ${run.head_sha}, run_id: ${run.id}`);

                // Get artifacts for this run
                const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  run_id: run.id
                });

                console.log(`Found ${artifacts.data.artifacts.length} artifacts for run ${run.id}`);

                // Look for build artifacts matching our OS
                const osArtifactName = '${{ matrix.os }}' === 'macOS' ? 'macos-builds' : 'windows-builds';
                const buildArtifact = artifacts.data.artifacts.find(a => a.name === osArtifactName);
                const metadataArtifactName = `build-metadata-${{ matrix.os }}-${{ github.sha }}`;
                const metadataArtifact = artifacts.data.artifacts.find(a => a.name === metadataArtifactName);

                if (buildArtifact && metadataArtifact) {
                  console.log(`Found cached build artifacts: ${buildArtifact.name}`);
                  core.setOutput('found_artifacts', 'true');
                  core.setOutput('build_artifact_id', buildArtifact.id);
                  core.setOutput('metadata_artifact_id', metadataArtifact.id);
                  core.setOutput('run_id', run.id);
                  return;
                }
              }
            }

            console.log('No matching cached artifacts found');
            core.setOutput('found_artifacts', 'false');

      - name: Download pre-built artifacts
        if: steps.download_artifacts.outputs.found_artifacts == 'true'
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.os == 'macOS' && 'macos-builds' || 'windows-builds' }}
          path: cached-builds/
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ steps.download_artifacts.outputs.run_id }}

      - name: Download build metadata
        if: steps.download_artifacts.outputs.found_artifacts == 'true'
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          name: build-metadata-${{ matrix.os }}-${{ github.sha }}
          path: build-metadata/
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ steps.download_artifacts.outputs.run_id }}

      - name: Verify cached artifacts
        id: verify_cache
        if: steps.download_artifacts.outputs.found_artifacts == 'true'
        run: |
          if [ -f "build-metadata/source-hash" ]; then
            cached_hash=$(cat build-metadata/source-hash)
            current_hash="${{ steps.check_artifacts.outputs.current_hash }}"
            echo "Cached hash: $cached_hash"
            echo "Current hash: $current_hash"

            if [ "$cached_hash" = "$current_hash" ]; then
              echo "✅ Cached artifacts are valid for current source code"
              echo "cache_valid=true" >> $GITHUB_OUTPUT

              # Copy cached builds to expected location
              if [ "${{ matrix.os }}" = "macOS" ]; then
                mkdir -p Builds/MacOSX/build/Release/
                cp -r cached-builds/* Builds/MacOSX/build/Release/
              else
                mkdir -p Builds/VisualStudio2022/x64/Release/
                cp -r cached-builds/* Builds/VisualStudio2022/x64/Release/
              fi

              echo "📦 Using cached build artifacts from run ${{ steps.download_artifacts.outputs.run_id }}"
            else
              echo "❌ Cached artifacts are outdated (source code changed)"
              echo "cache_valid=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "❌ Could not verify cached artifacts"
            echo "cache_valid=false" >> $GITHUB_OUTPUT
          fi

      - name: Cache JUCE modules
        if: steps.verify_cache.outputs.cache_valid != 'true'
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Caches/JUCE
            /Applications/JUCE 2/modules
            Builds\VisualStudio2022\build
            $env:LOCALAPPDATA\Microsoft\VisualStudio\*\MSBuild\Current\Bin\Roslyn
            $env:TEMP\juce-cache
          key: ${{ runner.os }}-juce-modules-${{ hashFiles('Pulse24Sync.jucer') }}
          restore-keys: |
            ${{ runner.os }}-juce-modules-

      - name: Cache build artifacts
        if: steps.verify_cache.outputs.cache_valid != 'true'
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Developer/Xcode/DerivedData
            Builds/MacOSX/build
            Builds\VisualStudio2022\x64\Release
            $env:TEMP\vs-cache
          key: ${{ runner.os }}-build-cache-${{ hashFiles('Pulse24Sync.jucer', 'Source/**') }}
          restore-keys: |
            ${{ runner.os }}-build-cache-

      - name: Setup JUCE and Projucer (macOS)
        if: matrix.os == 'macOS' && steps.verify_cache.outputs.cache_valid != 'true'
        run: |
          # Use pre-installed JUCE at /Applications/JUCE 2
          JUCE_PATH="/Applications/JUCE 2"

          if [ ! -d "$JUCE_PATH" ]; then
            echo "Error: JUCE not found at $JUCE_PATH"
            exit 1
          fi

          echo "Using JUCE from: $JUCE_PATH"

          # Look for Projucer in the expected location
          PROJUCER_PATH="$JUCE_PATH/Projucer.app/Contents/MacOS/Projucer"

          if [ ! -f "$PROJUCER_PATH" ]; then
            # Try alternative locations
            ALTERNATIVE_PATHS=(
              "$JUCE_PATH/extras/Projucer/Builds/MacOSX/build/Release/Projucer.app/Contents/MacOS/Projucer"
              "$JUCE_PATH/extras/Projucer/Builds/MacOSX/Projucer.app/Contents/MacOS/Projucer"
              "/Applications/Projucer.app/Contents/MacOS/Projucer"
            )

            for path in "${ALTERNATIVE_PATHS[@]}"; do
              if [ -f "$path" ]; then
                PROJUCER_PATH="$path"
                echo "Found Projucer at: $PROJUCER_PATH"
                break
              fi
            done
          fi

          if [ ! -f "$PROJUCER_PATH" ]; then
            echo "Error: Projucer not found. Searched in:"
            echo "  $JUCE_PATH/Projucer.app/Contents/MacOS/Projucer"
            echo "  $JUCE_PATH/extras/Projucer/Builds/MacOSX/build/Release/Projucer.app/Contents/MacOS/Projucer"
            echo "  $JUCE_PATH/extras/Projucer/Builds/MacOSX/Projucer.app/Contents/MacOS/Projucer"
            echo "  /Applications/Projucer.app/Contents/MacOS/Projucer"
            exit 1
          fi

          echo "Using Projucer from: $PROJUCER_PATH"

          # Generate Xcode project with Projucer
          echo "Generating Xcode project files..."
          "$PROJUCER_PATH" --resave Pulse24Sync.jucer

          # Give Projucer time to finish writing files
          sleep 3

          # Check if project files were created
          if [ ! -d "Builds/MacOSX" ]; then
            echo "Error: Xcode project files were not created"
            exit 1
          fi

          echo "Project files generated successfully"

      - name: Setup JUCE and Projucer (Windows)
        if: matrix.os == 'Windows' && steps.verify_cache.outputs.cache_valid != 'true'
        shell: powershell
        run: |
          # Set execution policy and run our script
          Set-ExecutionPolicy -ExecutionPolicy Bypass -Scope Process -Force

          # Use pre-installed JUCE at c:\JUCE
          Write-Host "Using pre-installed JUCE at c:\JUCE"

          # Check if Projucer exists at the expected location
          $projucerPath = "c:\JUCE\Projucer.exe"
          if (Test-Path $projucerPath) {
            Write-Host "Found Projucer at: $projucerPath"
          } else {
            # Try alternative locations
            $alternativePaths = @(
              "c:\JUCE\extras\Projucer\Builds\VisualStudio2022\x64\Release\Projucer.exe",
              "c:\Program Files\JUCE\Projucer.exe",
              "c:\Program Files (x86)\JUCE\Projucer.exe"
            )

            foreach ($path in $alternativePaths) {
              if (Test-Path $path) {
                $projucerPath = $path
                Write-Host "Found Projucer at: $projucerPath"
                break
              }
            }
          }

          if (!(Test-Path $projucerPath)) {
            Write-Error "Projucer not found. Please ensure JUCE is installed at c:\JUCE"
            exit 1
          }

          # Generate Visual Studio project with Projucer
          Write-Host "Generating Visual Studio project files..."
          & $projucerPath --resave Pulse24Sync.jucer

          # Give Projucer time to finish writing files
          Start-Sleep -Seconds 3

          # Check if files were created
          $possiblePaths = @(
            "Builds\VisualStudio2022\Pulse24Sync.sln",
            "Builds\VisualStudio2022\x64\Release\Pulse24Sync.sln",
            "Builds\VisualStudio2022\Release\Pulse24Sync.sln"
          )

          $solutionFound = $false
          foreach ($path in $possiblePaths) {
            if (Test-Path $path) {
              Write-Host "Found Visual Studio solution at: $path"
              $solutionFound = $true
              break
            }
          }

          if (!$solutionFound) {
            Write-Error "Visual Studio solution file was not created"
            exit 1
          }

          Write-Host "Project files generated successfully"

      - name: Build macOS Plugin
        if: matrix.os == 'macOS' && steps.verify_cache.outputs.cache_valid != 'true'
        run: |
          echo "Building Pulse24Sync plugin..."

          # Build the project using the correct scheme name
          xcodebuild -project Builds/MacOSX/Pulse24Sync.xcodeproj -configuration Release -scheme "Pulse24Sync - All"

          if [ $? -ne 0 ]; then
            echo "Build failed"
            exit 1
          fi

          echo "Build completed successfully"

      - name: Cleanup macOS build artifacts
        if: matrix.os == 'macOS' && always()
        run: |
          # Clean up temporary files
          find . -name "*.tmp" -o -name "*.temp" -o -name "*~" -type f -delete 2>/dev/null || true
          find . -name ".DS_Store" -type f -delete 2>/dev/null || true
          find . -name "*.build" -type d -exec rm -rf {} + 2>/dev/null || true
          find . -name "DerivedData" -type d -exec rm -rf {} + 2>/dev/null || true

      - name: Build Windows Plugin
        if: matrix.os == 'Windows' && steps.verify_cache.outputs.cache_valid != 'true'
        shell: cmd
        run: |
          echo Building Pulse24Sync plugin...

          REM Use Visual Studio Developer Command Prompt to access MSBuild
          call "C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\Tools\VsDevCmd.bat"

          REM Build the project
          msbuild Builds\VisualStudio2022\Pulse24Sync.sln /p:Configuration=Release /p:Platform=x64 /m

          if %ERRORLEVEL% neq 0 (
            echo Build failed
            exit /b 1
          )

          echo Build completed successfully

      - name: Cleanup Windows build artifacts
        if: matrix.os == 'Windows' && always()
        shell: powershell
        run: |
          # Clean up temporary files
          Get-ChildItem -Path . -Recurse -Include @("*.tmp", "*.temp", "*~", "Thumbs.db", "ehthumbs.db") -Force | Remove-Item -Force -ErrorAction SilentlyContinue

          # Clean up Visual Studio temporary files
          Get-ChildItem -Path . -Recurse -Name "*.build" -Directory | ForEach-Object { Remove-Item -Path $_ -Recurse -Force -ErrorAction SilentlyContinue }
          Get-ChildItem -Path . -Recurse -Name ".vs" -Directory | ForEach-Object { Remove-Item -Path $_ -Recurse -Force -ErrorAction SilentlyContinue }

      - name: Show build status
        run: |
          if [ "${{ steps.verify_cache.outputs.cache_valid }}" = "true" ]; then
            echo "🚀 Used cached build artifacts - skipped compilation"
            echo "📊 Build time saved by reusing artifacts from successful PR build"

            # Show what artifacts were cached
            if [ "${{ matrix.os }}" = "macOS" ]; then
              echo "📦 macOS artifacts:"
              find Builds/MacOSX/build/Release/ -name "*.vst3" -o -name "*.component" -o -name "*.app" 2>/dev/null || echo "  (checking cached artifacts...)"
            else
              echo "📦 Windows artifacts:"
              find Builds/VisualStudio2022/x64/Release/ -name "*.vst3" -o -name "*.exe" 2>/dev/null || echo "  (checking cached artifacts...)"
            fi
          else
            echo "🔨 Built from source - no suitable cached artifacts found"
          fi

      # Verify that we have valid build artifacts (either cached or freshly built)
      - name: Validate build artifacts
        run: |
          echo "🔍 Validating build artifacts..."
          artifacts_found=false

          if [ "${{ matrix.os }}" = "macOS" ]; then
            # Check for macOS artifacts
            if [ -d "Builds/MacOSX/build/Release" ]; then
              echo "✅ macOS build directory exists"

              # Look for expected plugin formats
              if find Builds/MacOSX/build/Release -name "*.vst3" | grep -q .; then
                echo "✅ VST3 plugin found"
                artifacts_found=true
              fi
              if find Builds/MacOSX/build/Release -name "*.component" | grep -q .; then
                echo "✅ Audio Unit plugin found"
                artifacts_found=true
              fi
              if find Builds/MacOSX/build/Release -name "*.app" | grep -q .; then
                echo "✅ Standalone app found"
                artifacts_found=true
              fi
            fi
          else
            # Check for Windows artifacts
            if [ -d "Builds/VisualStudio2022/x64/Release" ]; then
              echo "✅ Windows build directory exists"

              # Look for expected plugin formats
              if find Builds/VisualStudio2022/x64/Release -name "*.vst3" | grep -q .; then
                echo "✅ VST3 plugin found"
                artifacts_found=true
              fi
              if find Builds/VisualStudio2022/x64/Release -name "*.exe" | grep -q .; then
                echo "✅ Standalone executable found"
                artifacts_found=true
              fi
            fi
          fi

          if [ "$artifacts_found" = "false" ]; then
            echo "❌ No valid build artifacts found!"
            echo "Build directory contents:"
            if [ "${{ matrix.os }}" = "macOS" ]; then
              ls -la Builds/MacOSX/build/Release/ 2>/dev/null || echo "Directory not found"
            else
              find Builds/VisualStudio2022/x64/Release -type f 2>/dev/null | head -10 || echo "Directory not found"
            fi
            exit 1
          else
            echo "✅ Build artifacts validation passed"
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}
          path: ${{ matrix.build-path }}

  create-release:
    needs: build-and-release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref_name }}
          body: |
            ## Pulse24Sync ${{ github.ref_name }}

            ### Downloads
            - **macOS**: VST3, Audio Unit, and Standalone versions
            - **Windows**: VST3 and Standalone versions

            ### Installation
            - **macOS**: Copy the .vst3, .component, or .app files to your respective plugin directories
            - **Windows**: Copy the .vst3 files to your VST3 directory

            ### Changes
            See the [commit history](https://github.com/${{ github.repository }}/commits/${{ github.ref }}) for detailed changes.
          draft: false
          prerelease: false

      - name: List available artifacts
        run: |
          echo "=== macOS Artifacts ==="
          find ./artifacts/macos-builds -type f -name "*.vst3" -o -name "*.component" -o -name "*.app" | head -20
          echo "=== Windows Artifacts ==="
          find ./artifacts/windows-builds -type f -name "*.vst3" -o -name "*.exe" | head -20
          echo "=== All Artifacts Structure ==="
          find ./artifacts -type f | head -30
          echo "=== Full Directory Listing ==="
          ls -la ./artifacts/
          ls -la ./artifacts/macos-builds/ || echo "macos-builds not found"
          ls -la ./artifacts/windows-builds/ || echo "windows-builds not found"
          echo "=== File Sizes ==="
          du -sh ./artifacts/macos-builds/ || echo "macos-builds not found"
          du -sh ./artifacts/windows-builds/ || echo "windows-builds not found"

      - name: Create release packages
        run: |
          mkdir -p release-packages

          # macOS packages
          if [ -d "./artifacts/macos-builds" ]; then
            echo "Creating macOS packages..."

            # VST3
            if [ -d "./artifacts/macos-builds/Pulse24Sync.vst3" ]; then
              cd ./artifacts/macos-builds
              zip -r ../../release-packages/Pulse24Sync-macOS-vst3.zip Pulse24Sync.vst3
              cd ../..
            fi

            # Audio Unit
            if [ -d "./artifacts/macos-builds/Pulse24Sync.component" ]; then
              cd ./artifacts/macos-builds
              zip -r ../../release-packages/Pulse24Sync-macOS-au.zip Pulse24Sync.component
              cd ../..
            fi

            # Standalone
            if [ -d "./artifacts/macos-builds/Pulse24Sync.app" ]; then
              cd ./artifacts/macos-builds
              zip -r ../../release-packages/Pulse24Sync-macOS-standalone.zip Pulse24Sync.app
              cd ../..
            fi
          fi

          # Windows packages
          if [ -d "./artifacts/windows-builds" ]; then
            echo "Creating Windows packages..."

            # VST3
            if [ -d "./artifacts/windows-builds/Pulse24Sync.vst3" ]; then
              cd ./artifacts/windows-builds
              zip -r ../../release-packages/Pulse24Sync-Windows-vst3.zip Pulse24Sync.vst3
              cd ../..
            fi

            # Standalone
            if [ -f "./artifacts/windows-builds/Pulse24Sync.exe" ]; then
              cd ./artifacts/windows-builds
              zip ../../release-packages/Pulse24Sync-Windows-standalone.zip Pulse24Sync.exe
              cd ../..
            fi
          fi

          echo "Created packages:"
          ls -la release-packages/

      - name: Upload macOS VST3
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release-packages/Pulse24Sync-macOS-vst3.zip
          asset_name: Pulse24Sync-macOS-vst3.zip
          asset_content_type: application/zip
        continue-on-error: true

      - name: Upload macOS Audio Unit
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release-packages/Pulse24Sync-macOS-au.zip
          asset_name: Pulse24Sync-macOS-au.zip
          asset_content_type: application/zip
        continue-on-error: true

      - name: Upload macOS Standalone
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release-packages/Pulse24Sync-macOS-standalone.zip
          asset_name: Pulse24Sync-macOS-standalone.zip
          asset_content_type: application/zip
        continue-on-error: true

      - name: Upload Windows VST3
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release-packages/Pulse24Sync-Windows-vst3.zip
          asset_name: Pulse24Sync-Windows-vst3.zip
          asset_content_type: application/zip
        continue-on-error: true

      - name: Upload Windows Standalone
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release-packages/Pulse24Sync-Windows-standalone.zip
          asset_name: Pulse24Sync-Windows-standalone.zip
          asset_content_type: application/zip
        continue-on-error: true
