name: Create Release

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v1.0.0, v1.2.3, etc.

jobs:
  build-and-release:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macOS, Windows, ubuntu-24.04]
        include:
          - os: macOS
            artifact-name: macos-builds
            build-path: |
              Builds/MacOSX/build/Release/Pulse24Sync.vst3
              Builds/MacOSX/build/Release/Pulse24Sync.component
              Builds/MacOSX/build/Release/Pulse24Sync.app
          - os: Windows
            artifact-name: windows-builds
            build-path: |
              Builds/VisualStudio2022/x64/Release/VST3/Pulse24Sync.vst3/
              Builds/VisualStudio2022/x64/Release/Standalone Plugin/Pulse24Sync.exe
          - os: ubuntu-24.04
            artifact-name: linux-builds
            build-path: |
              build/Pulse24Sync_artefacts/Release/VST3/Pulse24Sync.vst3
              build/Pulse24Sync_artefacts/Release/Standalone/Pulse24Sync

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Build tools are pre-installed, no caching needed

      - name: Setup JUCE and Projucer (macOS)
        if: matrix.os == 'macOS'
        run: |
          # Use pre-installed JUCE at /Applications/JUCE 2
          JUCE_PATH="/Applications/JUCE 2"

          if [ ! -d "$JUCE_PATH" ]; then
            echo "Error: JUCE not found at $JUCE_PATH"
            exit 1
          fi

          echo "Using JUCE from: $JUCE_PATH"

          # Look for Projucer in the expected location
          PROJUCER_PATH="$JUCE_PATH/Projucer.app/Contents/MacOS/Projucer"

          if [ ! -f "$PROJUCER_PATH" ]; then
            # Try alternative locations
            ALTERNATIVE_PATHS=(
              "$JUCE_PATH/extras/Projucer/Builds/MacOSX/build/Release/Projucer.app/Contents/MacOS/Projucer"
              "$JUCE_PATH/extras/Projucer/Builds/MacOSX/Projucer.app/Contents/MacOS/Projucer"
              "/Applications/Projucer.app/Contents/MacOS/Projucer"
            )

            for path in "${ALTERNATIVE_PATHS[@]}"; do
              if [ -f "$path" ]; then
                PROJUCER_PATH="$path"
                echo "Found Projucer at: $PROJUCER_PATH"
                break
              fi
            done
          fi

          if [ ! -f "$PROJUCER_PATH" ]; then
            echo "Error: Projucer not found. Searched in:"
            echo "  $JUCE_PATH/Projucer.app/Contents/MacOS/Projucer"
            echo "  $JUCE_PATH/extras/Projucer/Builds/MacOSX/build/Release/Projucer.app/Contents/MacOS/Projucer"
            echo "  $JUCE_PATH/extras/Projucer/Builds/MacOSX/Projucer.app/Contents/MacOS/Projucer"
            echo "  /Applications/Projucer.app/Contents/MacOS/Projucer"
            exit 1
          fi

          echo "Using Projucer from: $PROJUCER_PATH"

          # Generate Xcode project with Projucer
          echo "Generating Xcode project files..."
          "$PROJUCER_PATH" --resave Pulse24Sync.jucer

          # Give Projucer time to finish writing files
          sleep 3

          # Check if project files were created
          if [ ! -d "Builds/MacOSX" ]; then
            echo "Error: Xcode project files were not created"
            exit 1
          fi

          echo "Project files generated successfully"

      - name: Setup JUCE and Projucer (Windows)
        if: matrix.os == 'Windows'
        shell: powershell
        run: |
          # Set execution policy and run our script
          Set-ExecutionPolicy -ExecutionPolicy Bypass -Scope Process -Force

          # Use pre-installed JUCE at c:\JUCE
          Write-Host "Using pre-installed JUCE at c:\JUCE"

          # Check if Projucer exists at the expected location
          $projucerPath = "c:\JUCE\Projucer.exe"
          if (Test-Path $projucerPath) {
            Write-Host "Found Projucer at: $projucerPath"
          } else {
            # Try alternative locations
            $alternativePaths = @(
              "c:\JUCE\extras\Projucer\Builds\VisualStudio2022\x64\Release\Projucer.exe",
              "c:\Program Files\JUCE\Projucer.exe",
              "c:\Program Files (x86)\JUCE\Projucer.exe"
            )

            foreach ($path in $alternativePaths) {
              if (Test-Path $path) {
                $projucerPath = $path
                Write-Host "Found Projucer at: $projucerPath"
                break
              }
            }
          }

          if (!(Test-Path $projucerPath)) {
            Write-Error "Projucer not found. Please ensure JUCE is installed at c:\JUCE"
            exit 1
          }

          # Generate Visual Studio project with Projucer
          Write-Host "Generating Visual Studio project files..."
          & $projucerPath --resave Pulse24Sync.jucer

          # Give Projucer time to finish writing files
          Start-Sleep -Seconds 3

          # Check if files were created
          $possiblePaths = @(
            "Builds\VisualStudio2022\Pulse24Sync.sln",
            "Builds\VisualStudio2022\x64\Release\Pulse24Sync.sln",
            "Builds\VisualStudio2022\Release\Pulse24Sync.sln"
          )

          $solutionFound = $false
          foreach ($path in $possiblePaths) {
            if (Test-Path $path) {
              Write-Host "Found Visual Studio solution at: $path"
              $solutionFound = $true
              break
            }
          }

          if (!$solutionFound) {
            Write-Error "Visual Studio solution file was not created"
            exit 1
          }

          Write-Host "Project files generated successfully"

      - name: Cache Linux dependencies
        if: matrix.os == 'ubuntu-24.04'
        uses: actions/cache@v4
        with:
          path: /var/cache/apt/archives
          key: ${{ runner.os }}-dependencies-${{ hashFiles('**/install-linux-deps.sh') }}
          restore-keys: |
            ${{ runner.os }}-dependencies-

      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-24.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            cmake \
            git \
            pkg-config \
            libasound2-dev \
            libjack-jackd2-dev \
            libfreetype6-dev \
            libgl1-mesa-dev \
            libcurl4-openssl-dev \
            libx11-dev \
            libxinerama-dev \
            libxext-dev \
            libxrandr-dev \
            libxcursor-dev \
            libxcomposite-dev \
            libgtk-3-dev



      - name: Build macOS Plugin
        if: matrix.os == 'macOS'
        run: |
          echo "Building Pulse24Sync plugin..."

          # Build the project using the correct scheme name
          xcodebuild -project Builds/MacOSX/Pulse24Sync.xcodeproj -configuration Release -scheme "Pulse24Sync - All"

          if [ $? -ne 0 ]; then
            echo "Build failed"
            exit 1
          fi

          echo "Build completed successfully"

      - name: Code Sign macOS Plugin
        if: matrix.os == 'macOS'
        run: |
          echo "üîê Checking code signing configuration..."

          # Function to sign a bundle with proper entitlements
          sign_bundle() {
              local bundle_path="$1"
              local bundle_name=$(basename "$bundle_path")
              
              if [ -z "$CODE_SIGN_IDENTITY" ]; then
                  echo "  ‚ö†Ô∏è  Skipping code signing for $bundle_name (no signing identity set)"
                  return 0
              fi
              
              echo "  üîè Code signing $bundle_name..."
              
              # Sign with entitlements and hardened runtime
              codesign --force --options runtime --entitlements entitlements.plist \
                  --sign "$CODE_SIGN_IDENTITY" --timestamp "$bundle_path"
              
              if [ $? -eq 0 ]; then
                  echo "  ‚úÖ Successfully signed $bundle_name"
                  
                  # Verify the signature
                  echo "  üîç Verifying signature..."
                  codesign --verify --deep --strict "$bundle_path"
                  if [ $? -eq 0 ]; then
                      echo "  ‚úÖ Signature verification passed"
                  else
                      echo "  ‚ö†Ô∏è  Signature verification failed"
                  fi
              else
                  echo "  ‚ùå Failed to sign $bundle_name"
                  return 1
              fi
          }

          # Look for signing identity (can be set via environment variable or detected)
          if [ -z "$CODE_SIGN_IDENTITY" ]; then
              # Try to detect Apple Developer certificates
              AVAILABLE_IDENTITIES=$(security find-identity -v -p codesigning | grep "Developer ID Application" | head -1)
              if [ ! -z "$AVAILABLE_IDENTITIES" ]; then
                  # Extract the identity from the security output
                  CODE_SIGN_IDENTITY=$(echo "$AVAILABLE_IDENTITIES" | sed -n 's/.*"\(.*\)"/\1/p')
                  echo "  üîç Auto-detected signing identity: $CODE_SIGN_IDENTITY"
              else
                  echo "  ‚ö†Ô∏è  No Developer ID Application certificate found"
                  echo "  ‚ÑπÔ∏è  Plugins will be built unsigned (may trigger security warnings)"
              fi
          else
              echo "  ‚úÖ Using specified signing identity: $CODE_SIGN_IDENTITY"
          fi

          # Check for entitlements file
          if [ ! -f "entitlements.plist" ]; then
              echo "  ‚ö†Ô∏è  entitlements.plist not found - code signing may fail"
          else
              echo "  ‚úÖ Found entitlements.plist"
          fi

          # Sign VST3 plugin
          if [ -d "Builds/MacOSX/build/Release/Pulse24Sync.vst3" ]; then
              echo "  - Signing VST3 plugin..."
              sign_bundle "Builds/MacOSX/build/Release/Pulse24Sync.vst3"
          fi

          # Sign AU component
          if [ -d "Builds/MacOSX/build/Release/Pulse24Sync.component" ]; then
              echo "  - Signing AU component..."
              sign_bundle "Builds/MacOSX/build/Release/Pulse24Sync.component"
          fi

          # Sign standalone application
          if [ -d "Builds/MacOSX/build/Release/Pulse24Sync.app" ]; then
              echo "  - Signing standalone application..."
              sign_bundle "Builds/MacOSX/build/Release/Pulse24Sync.app"
          fi

      - name: Cleanup macOS build artifacts
        if: matrix.os == 'macOS' && always()
        run: |
          # Clean up temporary files
          find . -name "*.tmp" -o -name "*.temp" -o -name "*~" -type f -delete 2>/dev/null || true
          find . -name ".DS_Store" -type f -delete 2>/dev/null || true
          find . -name "*.build" -type d -exec rm -rf {} + 2>/dev/null || true
          find . -name "DerivedData" -type d -exec rm -rf {} + 2>/dev/null || true

      - name: Build Windows Plugin
        if: matrix.os == 'Windows'
        shell: cmd
        run: |
          echo Building Pulse24Sync plugin...

          REM Use Visual Studio Developer Command Prompt to access MSBuild
          call "C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\Tools\VsDevCmd.bat"

          REM Build the project
          msbuild Builds\VisualStudio2022\Pulse24Sync.sln /p:Configuration=Release /p:Platform=x64 /m

          if %ERRORLEVEL% neq 0 (
            echo Build failed
            exit /b 1
          )

          echo Build completed successfully

      - name: Cleanup Windows build artifacts
        if: matrix.os == 'Windows' && always()
        shell: powershell
        run: |
          # Clean up temporary files
          Get-ChildItem -Path . -Recurse -Include @("*.tmp", "*.temp", "*~", "Thumbs.db", "ehthumbs.db") -Force | Remove-Item -Force -ErrorAction SilentlyContinue

          # Clean up Visual Studio temporary files
          Get-ChildItem -Path . -Recurse -Name "*.build" -Directory | ForEach-Object { Remove-Item -Path $_ -Recurse -Force -ErrorAction SilentlyContinue }
          Get-ChildItem -Path . -Recurse -Name ".vs" -Directory | ForEach-Object { Remove-Item -Path $_ -Recurse -Force -ErrorAction SilentlyContinue }

      - name: Build Linux Plugin
        if: matrix.os == 'ubuntu-24.04'
        run: |
          echo "Building Pulse24Sync VST Plugin for Linux..."
          chmod +x build.sh



          ./build.sh



      - name: Show build status (macOS)
        if: matrix.os == 'macOS'
        run: |
          echo "üî® Built from source using pre-installed build tools"
          echo "üì¶ macOS artifacts:"
          find Builds/MacOSX/build/Release/ -name "*.vst3" -o -name "*.component" -o -name "*.app" 2>/dev/null || echo "  (checking built artifacts...)"

      - name: Show build status (Windows)
        if: matrix.os == 'Windows'
        shell: powershell
        run: |
          Write-Host "üî® Built from source using pre-installed build tools"
          Write-Host "üì¶ Windows artifacts:"

          $artifacts = Get-ChildItem -Path "Builds\VisualStudio2022\x64\Release\" -Recurse -Include "*.vst3", "*.exe" -ErrorAction SilentlyContinue
          if ($artifacts) {
            $artifacts | ForEach-Object { Write-Host "  $($_.Name)" }
          } else {
            Write-Host "  (checking built artifacts...)"
          }

      - name: Show build status (Linux)
        if: matrix.os == 'ubuntu-24.04'
        run: |
          echo "üî® Built from source using pre-installed build tools"
          echo "üì¶ Linux artifacts:"
          find build/Pulse24Sync_artefacts/Release/ -name "*.vst3" -o -name "Pulse24Sync" 2>/dev/null || echo "  (checking built artifacts...)"

      # Verify that we have valid build artifacts
      - name: Validate build artifacts (macOS)
        if: matrix.os == 'macOS'
        run: |
          echo "üîç Validating build artifacts..."
          artifacts_found=false

          # Check for macOS artifacts
          if [ -d "Builds/MacOSX/build/Release" ]; then
            echo "‚úÖ macOS build directory exists"

            # Look for expected plugin formats
            if find Builds/MacOSX/build/Release -name "*.vst3" | grep -q .; then
              echo "‚úÖ VST3 plugin found"
              artifacts_found=true
            fi
            if find Builds/MacOSX/build/Release -name "*.component" | grep -q .; then
              echo "‚úÖ Audio Unit plugin found"
              artifacts_found=true
            fi
            if find Builds/MacOSX/build/Release -name "*.app" | grep -q .; then
              echo "‚úÖ Standalone app found"
              artifacts_found=true
            fi
          fi

          if [ "$artifacts_found" = "false" ]; then
            echo "‚ùå No valid build artifacts found!"
            echo "Build directory contents:"
            ls -la Builds/MacOSX/build/Release/ 2>/dev/null || echo "Directory not found"
            exit 1
          else
            echo "‚úÖ Build artifacts validation passed"
          fi

      - name: Validate build artifacts (Windows)
        if: matrix.os == 'Windows'
        shell: powershell
        run: |
          Write-Host "Validating build artifacts..."
          $artifacts_found = $false

          if (Test-Path "Builds\VisualStudio2022\x64\Release") {
            Write-Host "Windows build directory exists"

            if (Test-Path "Builds\VisualStudio2022\x64\Release\VST3\Pulse24Sync.vst3\Contents\x86_64-win\Pulse24Sync.vst3") {
              Write-Host "VST3 plugin found"
              $artifacts_found = $true
            }

            if (Test-Path "Builds\VisualStudio2022\x64\Release\Standalone Plugin\Pulse24Sync.exe") {
              Write-Host "Standalone executable found"
              $artifacts_found = $true
            }

            if ($artifacts_found) {
              Write-Host "Build artifacts validation passed"
            } else {
              Write-Host "No valid build artifacts found!"
              Write-Host "Build directory contents:"
              Get-ChildItem "Builds\VisualStudio2022\x64\Release" -Recurse | Select-Object FullName
              exit 1
            }
          } else {
            Write-Host "No valid build artifacts found!"
            Write-Host "Directory not found"
            exit 1
          }

      - name: Validate build artifacts (Linux)
        if: matrix.os == 'ubuntu-24.04'
        run: |
          echo "üîç Validating build artifacts..."
          artifacts_found=false

          # Check for Linux artifacts
          if [ -d "build/Pulse24Sync_artefacts/Release" ]; then
            echo "‚úÖ Linux build directory exists"

            # Look for expected plugin formats
            if find build/Pulse24Sync_artefacts/Release -name "*.vst3" | grep -q .; then
              echo "‚úÖ VST3 plugin found"
              artifacts_found=true
            fi

            if [ -f "build/Pulse24Sync_artefacts/Release/Standalone/Pulse24Sync" ]; then
              echo "‚úÖ Standalone executable found"
              artifacts_found=true
            fi
          fi

          if [ "$artifacts_found" = false ]; then
            echo "‚ùå No valid build artifacts found!"
            echo "Build directory contents:"
            if [ -d "build/Pulse24Sync_artefacts/Release" ]; then
              find build/Pulse24Sync_artefacts/Release -type f | head -10
            else
              echo "Directory not found"
            fi
            exit 1
          else
            echo "‚úÖ Build artifacts validation passed"
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}
          path: ${{ matrix.build-path }}

  create-release:
    needs: build-and-release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref_name }}
          body: |
            ## Pulse24Sync ${{ github.ref_name }}

            A VST3 plugin that generates precisely 24 MIDI pulses per quarter note, with real-time tempo synchronization to your DAW.

            ### Downloads
            - **macOS**: VST3, Audio Unit, and Standalone versions
            - **Windows**: VST3 and Standalone versions
            - **Linux**: VST3 and Standalone versions

            ### Installation Instructions
            Each download package includes comprehensive installation instructions:
            - `INSTALLATION.md` - Complete installation guide for all platforms
            - `README.md` - Project overview and build instructions
            
            **Quick Install**:
            - **macOS**: Copy plugins to `~/Library/Audio/Plug-Ins/VST3/` (VST3) or `~/Library/Audio/Plug-Ins/Components/` (AU)
            - **Windows**: Copy plugins to `C:\Program Files\Common Files\VST3\`
            - **Linux**: Copy plugins to `~/.vst3/` (VST3)

            ### What's New
            See the [commit history](https://github.com/${{ github.repository }}/commits/${{ github.ref }}) for detailed changes.
          draft: false
          prerelease: false

      - name: List available artifacts
        run: |
          echo "=== macOS Artifacts ==="
          find ./artifacts/macos-builds -type f -name "*.vst3" -o -name "*.component" -o -name "*.app" | head -20
          echo "=== Windows Artifacts ==="
          find ./artifacts/windows-builds -type f -name "*.vst3" -o -name "*.exe" | head -20
          echo "=== All Artifacts Structure ==="
          find ./artifacts -type f | head -30
          echo "=== Full Directory Listing ==="
          ls -la ./artifacts/
          ls -la ./artifacts/macos-builds/ || echo "macos-builds not found"
          ls -la ./artifacts/windows-builds/ || echo "windows-builds not found"
          echo "=== File Sizes ==="
          du -sh ./artifacts/macos-builds/ || echo "macos-builds not found"
          du -sh ./artifacts/windows-builds/ || echo "windows-builds not found"

      - name: Create release packages
        run: |
          mkdir -p release-packages

          # Copy documentation files for inclusion in releases
          echo "Preparing documentation files..."
          cp README.md release-packages/ || echo "README.md not found"
          cp INSTALLATION.md release-packages/ || echo "INSTALLATION.md not found"
          cp LINUX_BUILD_GUIDE.md release-packages/ || echo "LINUX_BUILD_GUIDE.md not found"

          # macOS packages
          if [ -d "./artifacts/macos-builds" ]; then
            echo "Creating macOS packages..."

            # VST3
            if [ -d "./artifacts/macos-builds/Pulse24Sync.vst3" ]; then
              cd ./artifacts/macos-builds
              zip -r ../../release-packages/Pulse24Sync-macOS-vst3.zip Pulse24Sync.vst3
              cd ../..
              # Add documentation to the package
              cd release-packages/
              zip Pulse24Sync-macOS-vst3.zip README.md INSTALLATION.md || echo "Documentation not found"
              cd ../
            fi

            # Audio Unit
            if [ -d "./artifacts/macos-builds/Pulse24Sync.component" ]; then
              cd ./artifacts/macos-builds
              zip -r ../../release-packages/Pulse24Sync-macOS-au.zip Pulse24Sync.component
              cd ../..
              # Add documentation to the package
              cd release-packages/
              zip Pulse24Sync-macOS-au.zip README.md INSTALLATION.md || echo "Documentation not found"
              cd ../
            fi

            # Standalone
            if [ -d "./artifacts/macos-builds/Pulse24Sync.app" ]; then
              cd ./artifacts/macos-builds
              zip -r ../../release-packages/Pulse24Sync-macOS-standalone.zip Pulse24Sync.app
              cd ../..
              # Add documentation to the package
              cd release-packages/
              zip Pulse24Sync-macOS-standalone.zip README.md INSTALLATION.md || echo "Documentation not found"
              cd ../
            fi
          fi

          # Windows packages
          if [ -d "./artifacts/windows-builds" ]; then
            echo "Creating Windows packages..."

            # VST3
            if [ -d "./artifacts/windows-builds/VST3/Pulse24Sync.vst3" ]; then
              cd ./artifacts/windows-builds/VST3
              zip -r ../../../release-packages/Pulse24Sync-Windows-vst3.zip Pulse24Sync.vst3
              cd ../../..
              # Add documentation to the package
              cd release-packages/
              zip Pulse24Sync-Windows-vst3.zip README.md INSTALLATION.md || echo "Documentation not found"
              cd ../
            fi

            # Standalone
            if [ -f "./artifacts/windows-builds/Standalone Plugin/Pulse24Sync.exe" ]; then
              cd "./artifacts/windows-builds/Standalone Plugin"
              zip ../../../release-packages/Pulse24Sync-Windows-standalone.zip Pulse24Sync.exe
              cd ../../..
              # Add documentation to the package
              cd release-packages/
              zip Pulse24Sync-Windows-standalone.zip README.md INSTALLATION.md || echo "Documentation not found"
              cd ../
            fi
          fi

          # Linux packages
          if [ -d "./artifacts/linux-builds" ]; then
            echo "Creating Linux packages..."

            # VST3
            if [ -d "./artifacts/linux-builds/Pulse24Sync.vst3" ]; then
              cd ./artifacts/linux-builds
              zip -r ../../release-packages/Pulse24Sync-Linux-vst3.zip Pulse24Sync.vst3
              cd ../..
              # Add documentation to the package
              cd release-packages/
              zip Pulse24Sync-Linux-vst3.zip README.md INSTALLATION.md LINUX_BUILD_GUIDE.md || echo "Documentation not found"
              cd ../
            fi

            # Standalone
            if [ -f "./artifacts/linux-builds/Pulse24Sync" ]; then
              cd ./artifacts/linux-builds
              zip ../../release-packages/Pulse24Sync-Linux-standalone.zip Pulse24Sync
              cd ../..
              # Add documentation to the package
              cd release-packages/
              zip Pulse24Sync-Linux-standalone.zip README.md INSTALLATION.md LINUX_BUILD_GUIDE.md || echo "Documentation not found"
              cd ../
            fi
          fi

          echo "Created packages:"
          ls -la release-packages/

      - name: Upload macOS VST3
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release-packages/Pulse24Sync-macOS-vst3.zip
          asset_name: Pulse24Sync-macOS-vst3.zip
          asset_content_type: application/zip
        continue-on-error: true

      - name: Upload macOS Audio Unit
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release-packages/Pulse24Sync-macOS-au.zip
          asset_name: Pulse24Sync-macOS-au.zip
          asset_content_type: application/zip
        continue-on-error: true

      - name: Upload macOS Standalone
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release-packages/Pulse24Sync-macOS-standalone.zip
          asset_name: Pulse24Sync-macOS-standalone.zip
          asset_content_type: application/zip
        continue-on-error: true

      - name: Upload Windows VST3
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release-packages/Pulse24Sync-Windows-vst3.zip
          asset_name: Pulse24Sync-Windows-vst3.zip
          asset_content_type: application/zip
        continue-on-error: true

      - name: Upload Windows Standalone
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release-packages/Pulse24Sync-Windows-standalone.zip
          asset_name: Pulse24Sync-Windows-standalone.zip
          asset_content_type: application/zip
        continue-on-error: true

      - name: Upload Linux VST3
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release-packages/Pulse24Sync-Linux-vst3.zip
          asset_name: Pulse24Sync-Linux-vst3.zip
          asset_content_type: application/zip
        continue-on-error: true

      - name: Upload Linux Standalone
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release-packages/Pulse24Sync-Linux-standalone.zip
          asset_name: Pulse24Sync-Linux-standalone.zip
          asset_content_type: application/zip
        continue-on-error: true
