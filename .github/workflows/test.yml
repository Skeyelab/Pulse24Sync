name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:  # Allow manual triggering

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false  # Don't cancel other jobs if one fails
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            install_deps: |
              sudo apt-get update
              sudo apt-get install -y \
                build-essential \
                cmake \
                ninja-build \
                libasound2-dev \
                libjack-jackd2-dev \
                libfreetype6-dev \
                libx11-dev \
                libxcomposite-dev \
                libxcursor-dev \
                libxext-dev \
                libxinerama-dev \
                libxrandr-dev \
                libxrender-dev \
                libgl1-mesa-dev \
                libglu1-mesa-dev \
                libcurl4-openssl-dev
            generator: Ninja
            
          - os: macos-latest
            install_deps: |
              # macOS dependencies are mostly built-in
              brew install ninja
            generator: Ninja
            
          - os: windows-latest
            install_deps: |
              # Windows dependencies handled by vcpkg or built-in
              choco install ninja
            generator: "Visual Studio 17 2022"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        
    - name: Setup build environment
      if: matrix.os == 'windows-latest'
      uses: microsoft/setup-msbuild@v1

    - name: Install dependencies
      run: ${{ matrix.install_deps }}
      shell: bash

    - name: Cache JUCE
      uses: actions/cache@v3
      with:
        path: |
          build-tests/_deps
          ~/.cmake
        key: ${{ runner.os }}-juce-${{ hashFiles('CMakeLists.txt') }}
        restore-keys: |
          ${{ runner.os }}-juce-

    - name: Configure CMake
      run: |
        cmake -B build-tests \
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
          -DPULSE24SYNC_BUILD_TESTS=ON \
          -G "${{ matrix.generator }}"

    - name: Build tests
      run: cmake --build build-tests --config ${{ env.BUILD_TYPE }} --parallel

    - name: Run tests
      working-directory: build-tests
      run: |
        # Run our custom test executable
        ./tests/Pulse24SyncTests --verbose
      shell: bash
      
    - name: Run CTest
      working-directory: build-tests
      run: ctest --output-on-failure --build-config ${{ env.BUILD_TYPE }}

    - name: Upload test logs
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: test-logs-${{ matrix.os }}
        path: |
          build-tests/tests/test_results.log
          build-tests/Testing/Temporary/LastTest.log
        retention-days: 7

  # Additional job for testing with different build configurations
  test-configurations:
    name: Test ${{ matrix.build_type }} on Ubuntu
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        build_type: [Debug, RelWithDebInfo]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          ninja-build \
          libasound2-dev \
          libjack-jackd2-dev \
          libfreetype6-dev \
          libx11-dev \
          libxcomposite-dev \
          libxcursor-dev \
          libxext-dev \
          libxinerama-dev \
          libxrandr-dev \
          libxrender-dev \
          libgl1-mesa-dev \
          libglu1-mesa-dev \
          libcurl4-openssl-dev

    - name: Cache JUCE
      uses: actions/cache@v3
      with:
        path: |
          build-tests/_deps
          ~/.cmake
        key: ubuntu-juce-${{ matrix.build_type }}-${{ hashFiles('CMakeLists.txt') }}
        restore-keys: |
          ubuntu-juce-${{ matrix.build_type }}-
          ubuntu-juce-

    - name: Configure CMake
      run: |
        cmake -B build-tests \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DPULSE24SYNC_BUILD_TESTS=ON \
          -G Ninja

    - name: Build tests
      run: cmake --build build-tests --config ${{ matrix.build_type }} --parallel

    - name: Run tests
      working-directory: build-tests
      run: |
        ./tests/Pulse24SyncTests --verbose
        ctest --output-on-failure --build-config ${{ matrix.build_type }}

  # Job for running tests with sanitizers (Linux only)
  test-sanitizers:
    name: Test with ${{ matrix.sanitizer }}
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        sanitizer: 
          - { name: "AddressSanitizer", flags: "-DCMAKE_CXX_FLAGS=-fsanitize=address -DCMAKE_EXE_LINKER_FLAGS=-fsanitize=address" }
          - { name: "UndefinedBehaviorSanitizer", flags: "-DCMAKE_CXX_FLAGS=-fsanitize=undefined -DCMAKE_EXE_LINKER_FLAGS=-fsanitize=undefined" }
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          ninja-build \
          libasound2-dev \
          libjack-jackd2-dev \
          libfreetype6-dev \
          libx11-dev \
          libxcomposite-dev \
          libxcursor-dev \
          libxext-dev \
          libxinerama-dev \
          libxrandr-dev \
          libxrender-dev \
          libgl1-mesa-dev \
          libglu1-mesa-dev \
          libcurl4-openssl-dev

    - name: Configure CMake with ${{ matrix.sanitizer.name }}
      run: |
        cmake -B build-tests \
          -DCMAKE_BUILD_TYPE=Debug \
          -DPULSE24SYNC_BUILD_TESTS=ON \
          ${{ matrix.sanitizer.flags }} \
          -G Ninja

    - name: Build tests
      run: cmake --build build-tests --config Debug --parallel

    - name: Run tests with ${{ matrix.sanitizer.name }}
      working-directory: build-tests
      run: |
        ./tests/Pulse24SyncTests --verbose
        ctest --output-on-failure --build-config Debug

  # Job for code coverage (Linux only)
  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          ninja-build \
          gcov \
          lcov \
          libasound2-dev \
          libjack-jackd2-dev \
          libfreetype6-dev \
          libx11-dev \
          libxcomposite-dev \
          libxcursor-dev \
          libxext-dev \
          libxinerama-dev \
          libxrandr-dev \
          libxrender-dev \
          libgl1-mesa-dev \
          libglu1-mesa-dev \
          libcurl4-openssl-dev

    - name: Configure CMake with coverage
      run: |
        cmake -B build-tests \
          -DCMAKE_BUILD_TYPE=Debug \
          -DPULSE24SYNC_BUILD_TESTS=ON \
          -DCMAKE_CXX_FLAGS="--coverage" \
          -DCMAKE_EXE_LINKER_FLAGS="--coverage" \
          -G Ninja

    - name: Build tests
      run: cmake --build build-tests --config Debug --parallel

    - name: Run tests
      working-directory: build-tests
      run: |
        ./tests/Pulse24SyncTests --verbose
        ctest --output-on-failure --build-config Debug

    - name: Generate coverage report
      run: |
        lcov --capture --directory build-tests --output-file coverage.info
        lcov --remove coverage.info '/usr/*' --output-file coverage.info
        lcov --remove coverage.info '*/_deps/*' --output-file coverage.info
        lcov --remove coverage.info '*/tests/*' --output-file coverage.info
        lcov --list coverage.info

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false