name: Build Pulse24Sync

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-linux:
    runs-on: ubuntu-24.04
    if: true  # Enabled for Linux builds
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            cmake \
            git \
            pkg-config \
            libasound2-dev \
            libjack-jackd2-dev \
            libfreetype6-dev \
            libgl1-mesa-dev \
            libcurl4-openssl-dev \
            libx11-dev \
            libxinerama-dev \
            libxext-dev \
            libxrandr-dev \
            libxcursor-dev \
            libxcomposite-dev \
            libgtk-3-dev

      - name: Verify dependencies
        run: |
          echo "Verifying required packages are available:"
          pkg-config --exists alsa && echo "✓ ALSA" || echo "✗ ALSA"
          pkg-config --exists jack && echo "✓ JACK" || echo "✗ JACK"
          pkg-config --exists freetype2 && echo "✓ FreeType2" || echo "✗ FreeType2"
          pkg-config --exists gl && echo "✓ OpenGL" || echo "✗ OpenGL"
          pkg-config --exists libcurl && echo "✓ cURL" || echo "✗ cURL"
          cmake --version
          gcc --version

      - name: Build Linux Plugin
        run: |
          echo "Building Pulse24Sync VST Plugin for Linux..."
          chmod +x build.sh
          ./build.sh

      - name: Create clean distribution
        run: |
          echo "Creating clean distribution for Linux..."
          # For Linux, we'll create a simple distribution from the build artifacts
          mkdir -p dist
          if [ -d "build/Pulse24Sync_artefacts/Release/VST3/Pulse24Sync.vst3" ]; then
            cp -R build/Pulse24Sync_artefacts/Release/VST3/Pulse24Sync.vst3 dist/
          fi
          if [ -f "build/Pulse24Sync_artefacts/Release/Standalone/Pulse24Sync" ]; then
            cp build/Pulse24Sync_artefacts/Release/Standalone/Pulse24Sync dist/
          fi

      - name: Verify distribution
        run: |
          echo "Checking distribution artifacts:"
          ls -la dist/
          echo ""
          echo "Distribution size:"
          du -sh dist/*

      - name: Upload Linux build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-builds
          path: dist/

  build-macos:
    runs-on: macOS
    if: true  # Enabled for macOS builds
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup JUCE and Projucer
        run: |
          # Use pre-installed JUCE at /Applications/JUCE 2
          JUCE_PATH="/Applications/JUCE 2"

          if [ ! -d "$JUCE_PATH" ]; then
            echo "Error: JUCE not found at $JUCE_PATH"
            exit 1
          fi

          echo "Using JUCE from: $JUCE_PATH"

          # Look for Projucer in the expected location
          PROJUCER_PATH="$JUCE_PATH/Projucer.app/Contents/MacOS/Projucer"

          if [ ! -f "$PROJUCER_PATH" ]; then
            # Try alternative locations
            ALTERNATIVE_PATHS=(
              "$JUCE_PATH/extras/Projucer/Builds/MacOSX/build/Release/Projucer.app/Contents/MacOS/Projucer"
              "$JUCE_PATH/extras/Projucer/Builds/MacOSX/Projucer.app/Contents/MacOS/Projucer"
              "/Applications/Projucer.app/Contents/MacOS/Projucer"
            )

            for path in "${ALTERNATIVE_PATHS[@]}"; do
              if [ -f "$path" ]; then
                PROJUCER_PATH="$path"
                echo "Found Projucer at: $PROJUCER_PATH"
                break
              fi
            done
          fi

          if [ ! -f "$PROJUCER_PATH" ]; then
            echo "Error: Projucer not found. Searched in:"
            echo "  $JUCE_PATH/Projucer.app/Contents/MacOS/Projucer"
            echo "  $JUCE_PATH/extras/Projucer/Builds/MacOSX/build/Release/Projucer.app/Contents/MacOS/Projucer"
            echo "  $JUCE_PATH/extras/Projucer/Builds/MacOSX/Projucer.app/Contents/MacOS/Projucer"
            echo "  /Applications/Projucer.app/Contents/MacOS/Projucer"
            exit 1
          fi

          echo "Using Projucer from: $PROJUCER_PATH"

          # Generate Xcode project with Projucer
          echo "Generating Xcode project files..."
          "$PROJUCER_PATH" --resave Pulse24Sync.jucer

          # Give Projucer time to finish writing files
          sleep 3

          # Check if project files were created
          if [ ! -d "Builds/MacOSX" ]; then
            echo "Error: Xcode project files were not created"
            echo "Contents of current directory:"
            ls -la
            if [ -d "Builds" ]; then
              echo "Contents of Builds directory:"
              ls -la Builds/
            fi
            exit 1
          fi

          echo "Project files generated successfully"

      - name: Build macOS Plugin
        run: |
          echo "Building Pulse24Sync plugin..."

          # Build the project using the correct scheme name
          xcodebuild -project Builds/MacOSX/Pulse24Sync.xcodeproj -configuration Release -scheme "Pulse24Sync - All"

          if [ $? -ne 0 ]; then
            echo "Build failed"
            exit 1
          fi

          echo "Build completed successfully"

      - name: Create clean distribution
        run: |
          echo "Creating clean distribution for macOS..."
          cd Builds/MacOSX/build/Release
          chmod +x $GITHUB_WORKSPACE/create-macos-distribution.sh
          $GITHUB_WORKSPACE/create-macos-distribution.sh

      - name: Verify distribution
        run: |
          echo "Checking distribution artifacts:"
          ls -la Builds/MacOSX/build/Release/dist/
          echo ""
          echo "Distribution size:"
          du -sh Builds/MacOSX/build/Release/dist/*

      - name: Cleanup macOS build artifacts
        if: always()
        run: |
          # Clean up temporary files
          find . -name "*.tmp" -o -name "*.temp" -o -name "*~" -type f -delete 2>/dev/null || true
          find . -name ".DS_Store" -type f -delete 2>/dev/null || true
          find . -name "*.build" -type d -exec rm -rf {} + 2>/dev/null || true
          find . -name "DerivedData" -type d -exec rm -rf {} + 2>/dev/null || true

      - name: Upload macOS build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-builds
          path: Builds/MacOSX/build/Release/dist/

  build-windows:
    runs-on: Windows
    if: true  # Enabled for Windows builds
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup JUCE and Projucer
        shell: powershell
        run: |
          # Set execution policy and run our script
          Set-ExecutionPolicy -ExecutionPolicy Bypass -Scope Process -Force

          # Use pre-installed JUCE at c:\JUCE
          Write-Host "Using pre-installed JUCE at c:\JUCE"

          # Check if Projucer exists at the expected location
          $projucerPath = "c:\JUCE\Projucer.exe"
          if (Test-Path $projucerPath) {
            Write-Host "Found Projucer at: $projucerPath"
          } else {
            # Try alternative locations
            $alternativePaths = @(
              "c:\JUCE\extras\Projucer\Builds\VisualStudio2022\x64\Release\Projucer.exe",
              "c:\Program Files\JUCE\Projucer.exe",
              "c:\Program Files (x86)\JUCE\Projucer.exe"
            )

            foreach ($path in $alternativePaths) {
              if (Test-Path $path) {
                $projucerPath = $path
                Write-Host "Found Projucer at: $projucerPath"
                break
              }
            }
          }

          if (!(Test-Path $projucerPath)) {
            Write-Error "Projucer not found. Please ensure JUCE is installed at c:\JUCE"
            exit 1
          }

          # Generate Visual Studio project with Projucer
          Write-Host "Generating Visual Studio project files..."
          & $projucerPath --resave Pulse24Sync.jucer

          # Note: Projucer may return non-zero exit code even on success
          # So we check if files were actually created instead
          Write-Host "Projucer completed. Waiting for files to be written..."

          # Give Projucer time to finish writing files
          Start-Sleep -Seconds 3

          Write-Host "Checking if files were created..."

          # Check multiple possible locations for the solution file
          $possiblePaths = @(
            "Builds\VisualStudio2022\Pulse24Sync.sln",
            "Builds\VisualStudio2022\x64\Release\Pulse24Sync.sln",
            "Builds\VisualStudio2022\Release\Pulse24Sync.sln"
          )

          $solutionFound = $false
          foreach ($path in $possiblePaths) {
            if (Test-Path $path) {
              Write-Host "Found Visual Studio solution at: $path"
              $solutionFound = $true
              break
            }
          }

          if (!$solutionFound) {
            Write-Host "Checking what files were actually created in Builds directory:"
            if (Test-Path "Builds") {
              Get-ChildItem -Path "Builds" -Recurse -Name | Write-Host
            } else {
              Write-Host "Builds directory does not exist"
            }
            Write-Error "Visual Studio solution file was not created"
            exit 1
          }

          Write-Host "Project files generated successfully"

      - name: Build Windows Plugin
        shell: cmd
        run: |
          echo Building Pulse24Sync plugin...

          REM Use Visual Studio Developer Command Prompt to access MSBuild
          call "C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\Tools\VsDevCmd.bat"

          REM Build the project
          msbuild Builds\VisualStudio2022\Pulse24Sync.sln /p:Configuration=Release /p:Platform=x64 /m

          if %ERRORLEVEL% neq 0 (
            echo Build failed
            exit /b 1
          )

          echo Build completed successfully

      - name: Create clean distribution
        shell: cmd
        run: |
          echo Creating clean distribution for Windows...
          cd Builds\VisualStudio2022\x64\Release

          REM Check if we have the build files
          if not exist "VST3\Pulse24Sync.vst3" (
              echo ERROR: VST3 plugin not found at VST3\Pulse24Sync.vst3
              exit /b 1
          )

          echo 📦 Creating clean distribution from existing build...

          REM Create distribution directory
          if exist "dist" rd /s /q "dist" >nul 2>&1
          mkdir "dist"

          REM Copy VST3 plugin
          echo   - Copying VST3 plugin...
          xcopy "VST3\Pulse24Sync.vst3" "dist\Pulse24Sync.vst3\" /E /I /Y >nul

          REM Copy standalone application
          if exist "Standalone Plugin\Pulse24Sync.exe" (
              echo   - Copying standalone application...
              copy "Standalone Plugin\Pulse24Sync.exe" "dist\Pulse24Sync.exe" >nul
          )

          echo 📊 Distribution created in 'dist' folder:
          if exist "dist" (
              for /f "tokens=*" %%i in ('dir /s "dist" ^| find "File(s)"') do echo   %%i
              for /f "tokens=*" %%i in ('dir /s "dist" ^| find "Dir(s)"') do echo   %%i
          )

      - name: Verify distribution
        shell: cmd
        run: |
          echo Checking distribution artifacts:
          dir Builds\VisualStudio2022\x64\Release\dist
          echo.
          echo Distribution size:
          dir Builds\VisualStudio2022\x64\Release\dist /s

      - name: Cleanup Windows build artifacts
        if: always()
        shell: powershell
        run: |
          # Clean up temporary files
          Get-ChildItem -Path . -Recurse -Include @("*.tmp", "*.temp", "*~", "Thumbs.db", "ehthumbs.db") -Force | Remove-Item -Force -ErrorAction SilentlyContinue

          # Clean up Visual Studio temporary files
          Get-ChildItem -Path . -Recurse -Name "*.build" -Directory | ForEach-Object { Remove-Item -Path $_ -Recurse -Force -ErrorAction SilentlyContinue }
          Get-ChildItem -Path . -Recurse -Name ".vs" -Directory | ForEach-Object { Remove-Item -Path $_ -Recurse -Force -ErrorAction SilentlyContinue }

      - name: Upload Windows build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-builds
          path: Builds/VisualStudio2022/x64/Release/dist/
