name: Build Pulse24Sync

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-linux:
    runs-on: ubuntu-24.04
    if: false  # Disabled - set to true to enable
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Linux with Docker and CMake
        run: |
          # Create a Dockerfile for the build environment
          cat > Dockerfile << 'EOF'
          FROM ubuntu:24.04

          # Install dependencies
          RUN apt-get update && apt-get install -y \
            build-essential \
            cmake \
            git \
            libasound2-dev \
            libjack-jackd2-dev \
            libfreetype6-dev \
            libcurl4-openssl-dev \
            libwebkit2gtk-4.1-dev \
            libgtk-3-dev \
            libx11-dev \
            libxrandr-dev \
            libxinerama-dev \
            libxcursor-dev \
            libxi-dev \
            pkg-config \
            && rm -rf /var/lib/apt/lists/*

          # Set working directory
          WORKDIR /workspace

          # Copy project files
          COPY . .

          # Clone JUCE
          RUN git clone https://github.com/juce-framework/JUCE.git && \
              cd JUCE && \
              git checkout 7.0.12

          # Create build directory and build with CMake
          RUN mkdir -p build && \
              cd build && \
              cmake .. -DCMAKE_BUILD_TYPE=Release \
                -DJUCE_BUILD_EXTRAS=OFF \
                -DJUCE_BUILD_EXAMPLES=OFF \
                -DJUCE_ENABLE_MODULE_SOURCE_GROUPS=ON && \
              make -j$(nproc)

          # Keep container running to copy artifacts
          CMD ["tail", "-f", "/dev/null"]
          EOF

          # Build and run the Docker container
          docker build -t pulse24sync-build .
          docker run -d --name build-container pulse24sync-build tail -f /dev/null

          # Copy build artifacts from container
          docker cp build-container:/workspace/build ./linux-builds

          # Clean up
          docker stop build-container
          docker rm build-container

      - name: Upload Linux build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-builds
          path: linux-builds/

  build-macos:
    runs-on: macOS
    if: true  # Enabled for macOS builds
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache JUCE modules
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Caches/JUCE
            /Applications/JUCE 2/modules
          key: ${{ runner.os }}-juce-modules-${{ hashFiles('Pulse24Sync.jucer') }}
          restore-keys: |
            ${{ runner.os }}-juce-modules-

      - name: Cache Xcode build
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Developer/Xcode/DerivedData
            Builds/MacOSX/build
          key: ${{ runner.os }}-xcode-build-${{ hashFiles('Pulse24Sync.jucer', 'Source/**') }}
          restore-keys: |
            ${{ runner.os }}-xcode-build-

      - name: Setup JUCE and Projucer
        run: |
          # Use pre-installed JUCE at /Applications/JUCE 2
          JUCE_PATH="/Applications/JUCE 2"

          if [ ! -d "$JUCE_PATH" ]; then
            echo "Error: JUCE not found at $JUCE_PATH"
            exit 1
          fi

          echo "Using JUCE from: $JUCE_PATH"

          # Look for Projucer in the expected location
          PROJUCER_PATH="$JUCE_PATH/Projucer.app/Contents/MacOS/Projucer"

          if [ ! -f "$PROJUCER_PATH" ]; then
            # Try alternative locations
            ALTERNATIVE_PATHS=(
              "$JUCE_PATH/extras/Projucer/Builds/MacOSX/build/Release/Projucer.app/Contents/MacOS/Projucer"
              "$JUCE_PATH/extras/Projucer/Builds/MacOSX/Projucer.app/Contents/MacOS/Projucer"
              "/Applications/Projucer.app/Contents/MacOS/Projucer"
            )

            for path in "${ALTERNATIVE_PATHS[@]}"; do
              if [ -f "$path" ]; then
                PROJUCER_PATH="$path"
                echo "Found Projucer at: $PROJUCER_PATH"
                break
              fi
            done
          fi

          if [ ! -f "$PROJUCER_PATH" ]; then
            echo "Error: Projucer not found. Searched in:"
            echo "  $JUCE_PATH/Projucer.app/Contents/MacOS/Projucer"
            echo "  $JUCE_PATH/extras/Projucer/Builds/MacOSX/build/Release/Projucer.app/Contents/MacOS/Projucer"
            echo "  $JUCE_PATH/extras/Projucer/Builds/MacOSX/Projucer.app/Contents/MacOS/Projucer"
            echo "  /Applications/Projucer.app/Contents/MacOS/Projucer"
            exit 1
          fi

          echo "Using Projucer from: $PROJUCER_PATH"

          # Generate Xcode project with Projucer
          echo "Generating Xcode project files..."
          "$PROJUCER_PATH" --resave Pulse24Sync.jucer

          # Give Projucer time to finish writing files
          sleep 3

          # Check if project files were created
          if [ ! -d "Builds/MacOSX" ]; then
            echo "Error: Xcode project files were not created"
            echo "Contents of current directory:"
            ls -la
            if [ -d "Builds" ]; then
              echo "Contents of Builds directory:"
              ls -la Builds/
            fi
            exit 1
          fi

          echo "Project files generated successfully"

      - name: Build macOS Plugin
        run: |
          echo "Building Pulse24Sync plugin..."

          # Build the project using the correct scheme name
          xcodebuild -project Builds/MacOSX/Pulse24Sync.xcodeproj -configuration Release -scheme "Pulse24Sync - All"

          if [ $? -ne 0 ]; then
            echo "Build failed"
            exit 1
          fi

          echo "Build completed successfully"

      - name: Upload macOS build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-builds
          path: Builds/MacOSX/build/Release/

  build-windows:
    runs-on: Windows
    if: true  # Enabled for Windows builds
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache JUCE modules
        uses: actions/cache@v4
        with:
          path: |
            c:\JUCE\modules
            $env:LOCALAPPDATA\JUCE
          key: ${{ runner.os }}-juce-modules-${{ hashFiles('Pulse24Sync.jucer') }}
          restore-keys: |
            ${{ runner.os }}-juce-modules-

      - name: Cache Visual Studio build
        uses: actions/cache@v4
        with:
          path: |
            Builds\VisualStudio2022\build
            $env:LOCALAPPDATA\Microsoft\VisualStudio\*\MSBuild\Current\Bin\Roslyn
          key: ${{ runner.os }}-vs-build-${{ hashFiles('Pulse24Sync.jucer', 'Source/**') }}
          restore-keys: |
            ${{ runner.os }}-vs-build-

      - name: Setup JUCE and Projucer
        shell: powershell
        run: |
          # Set execution policy and run our script
          Set-ExecutionPolicy -ExecutionPolicy Bypass -Scope Process -Force

          # Use pre-installed JUCE at c:\JUCE
          Write-Host "Using pre-installed JUCE at c:\JUCE"

          # Check if Projucer exists at the expected location
          $projucerPath = "c:\JUCE\Projucer.exe"
          if (Test-Path $projucerPath) {
            Write-Host "Found Projucer at: $projucerPath"
          } else {
            # Try alternative locations
            $alternativePaths = @(
              "c:\JUCE\extras\Projucer\Builds\VisualStudio2022\x64\Release\Projucer.exe",
              "c:\Program Files\JUCE\Projucer.exe",
              "c:\Program Files (x86)\JUCE\Projucer.exe"
            )

            foreach ($path in $alternativePaths) {
              if (Test-Path $path) {
                $projucerPath = $path
                Write-Host "Found Projucer at: $projucerPath"
                break
              }
            }
          }

          if (!(Test-Path $projucerPath)) {
            Write-Error "Projucer not found. Please ensure JUCE is installed at c:\JUCE"
            exit 1
          }

          # Generate Visual Studio project with Projucer
          Write-Host "Generating Visual Studio project files..."
          & $projucerPath --resave Pulse24Sync.jucer

          # Note: Projucer may return non-zero exit code even on success
          # So we check if files were actually created instead
          Write-Host "Projucer completed. Waiting for files to be written..."

          # Give Projucer time to finish writing files
          Start-Sleep -Seconds 3

          Write-Host "Checking if files were created..."

          # Check multiple possible locations for the solution file
          $possiblePaths = @(
            "Builds\VisualStudio2022\Pulse24Sync.sln",
            "Builds\VisualStudio2022\x64\Release\Pulse24Sync.sln",
            "Builds\VisualStudio2022\Release\Pulse24Sync.sln"
          )

          $solutionFound = $false
          foreach ($path in $possiblePaths) {
            if (Test-Path $path) {
              Write-Host "Found Visual Studio solution at: $path"
              $solutionFound = $true
              break
            }
          }

          if (!$solutionFound) {
            Write-Host "Checking what files were actually created in Builds directory:"
            if (Test-Path "Builds") {
              Get-ChildItem -Path "Builds" -Recurse -Name | Write-Host
            } else {
              Write-Host "Builds directory does not exist"
            }
            Write-Error "Visual Studio solution file was not created"
            exit 1
          }

          Write-Host "Project files generated successfully"

      - name: Build Windows Plugin
        shell: cmd
        run: |
          echo Building Pulse24Sync plugin...

          REM Use Visual Studio Developer Command Prompt to access MSBuild
          call "C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\Tools\VsDevCmd.bat"

          REM Build the project
          msbuild Builds\VisualStudio2022\Pulse24Sync.sln /p:Configuration=Release /p:Platform=x64 /m

          if %ERRORLEVEL% neq 0 (
            echo Build failed
            exit /b 1
          )

          echo Build completed successfully

      - name: Upload Windows build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-builds
          path: |
            Builds/VisualStudio2022/x64/Release/
            Builds/VisualStudio2022/build/Release/
