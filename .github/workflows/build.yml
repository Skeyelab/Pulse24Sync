name: Build Pulse24Sync

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-linux:
    runs-on: ubuntu-24.04
    if: false  # Disabled - set to true to enable
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Cache Docker layers and built images
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ hashFiles('Source/**', 'CMakeLists.txt', 'Pulse24Sync.jucer', 'Dockerfile') }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # Setup Docker Buildx for advanced caching
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Linux with Docker and CMake
        uses: docker/build-push-action@v5
        with:
          context: .
          tags: pulse24sync-build:latest
          outputs: type=docker,dest=/tmp/pulse24sync-image.tar
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      # Move cache to prevent unlimited growth
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Extract build artifacts
        run: |
          # Load and run the built image
          docker load -i /tmp/pulse24sync-image.tar
          docker run -d --name build-container pulse24sync-build:latest tail -f /dev/null
          
          # Copy build artifacts from container
          docker cp build-container:/workspace/build ./linux-builds

      - name: Cleanup Docker resources
        if: always()
        run: |
          # Stop and remove container
          docker stop build-container || true
          docker rm build-container || true
          
          # Remove Docker image
          docker rmi pulse24sync-build:latest || true
          
          # Clean up dangling images and containers
          docker system prune -f || true

      - name: Upload Linux build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-builds
          path: linux-builds/

  build-macos:
    runs-on: macOS
    if: true  # Enabled for macOS builds
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Cache JUCE installation and generated project files
      - name: Cache JUCE and Projucer files
        uses: actions/cache@v4
        with:
          path: |
            Builds/
            JuceLibraryCode/
          key: ${{ runner.os }}-juce-projucer-${{ hashFiles('Pulse24Sync.jucer', 'Source/**') }}
          restore-keys: |
            ${{ runner.os }}-juce-projucer-

      # Cache Xcode build artifacts
      - name: Cache Xcode build artifacts
        uses: actions/cache@v4
        with:
          path: |
            Builds/MacOSX/build/
            ~/Library/Developer/Xcode/DerivedData/
          key: ${{ runner.os }}-xcode-${{ hashFiles('Source/**', 'Pulse24Sync.jucer') }}
          restore-keys: |
            ${{ runner.os }}-xcode-

      - name: Check for cached build
        id: check-cache
        run: |
          if [ -f "Builds/MacOSX/build/Release/Pulse24Sync.vst3/Contents/MacOS/Pulse24Sync" ]; then
            echo "cache-hit=true" >> $GITHUB_OUTPUT
            echo "âœ… Found cached macOS build artifacts"
          else
            echo "cache-hit=false" >> $GITHUB_OUTPUT
            echo "ðŸ”¨ No cached build found, proceeding with full build"
          fi

      - name: Setup JUCE and Projucer
        if: steps.check-cache.outputs.cache-hit != 'true'
        run: |
          # Use pre-installed JUCE at /Applications/JUCE 2
          JUCE_PATH="/Applications/JUCE 2"

          if [ ! -d "$JUCE_PATH" ]; then
            echo "Error: JUCE not found at $JUCE_PATH"
            exit 1
          fi

          echo "Using JUCE from: $JUCE_PATH"

          # Look for Projucer in the expected location
          PROJUCER_PATH="$JUCE_PATH/Projucer.app/Contents/MacOS/Projucer"

          if [ ! -f "$PROJUCER_PATH" ]; then
            # Try alternative locations
            ALTERNATIVE_PATHS=(
              "$JUCE_PATH/extras/Projucer/Builds/MacOSX/build/Release/Projucer.app/Contents/MacOS/Projucer"
              "$JUCE_PATH/extras/Projucer/Builds/MacOSX/Projucer.app/Contents/MacOS/Projucer"
              "/Applications/Projucer.app/Contents/MacOS/Projucer"
            )

            for path in "${ALTERNATIVE_PATHS[@]}"; do
              if [ -f "$path" ]; then
                PROJUCER_PATH="$path"
                echo "Found Projucer at: $PROJUCER_PATH"
                break
              fi
            done
          fi

          if [ ! -f "$PROJUCER_PATH" ]; then
            echo "Error: Projucer not found. Searched in:"
            echo "  $JUCE_PATH/Projucer.app/Contents/MacOS/Projucer"
            echo "  $JUCE_PATH/extras/Projucer/Builds/MacOSX/build/Release/Projucer.app/Contents/MacOS/Projucer"
            echo "  $JUCE_PATH/extras/Projucer/Builds/MacOSX/Projucer.app/Contents/MacOS/Projucer"
            echo "  /Applications/Projucer.app/Contents/MacOS/Projucer"
            exit 1
          fi

          echo "Using Projucer from: $PROJUCER_PATH"

          # Only regenerate if cached files don't exist
          if [ ! -d "Builds/MacOSX" ]; then
            # Generate Xcode project with Projucer
            echo "Generating Xcode project files..."
            "$PROJUCER_PATH" --resave Pulse24Sync.jucer

            # Give Projucer time to finish writing files
            sleep 3

            # Check if project files were created
            if [ ! -d "Builds/MacOSX" ]; then
              echo "Error: Xcode project files were not created"
              echo "Contents of current directory:"
              ls -la
              if [ -d "Builds" ]; then
                echo "Contents of Builds directory:"
                ls -la Builds/
              fi
              exit 1
            fi

            echo "Project files generated successfully"
          else
            echo "âœ… Using cached Xcode project files"
          fi

      - name: Build macOS Plugin
        if: steps.check-cache.outputs.cache-hit != 'true'
        run: |
          echo "Building Pulse24Sync plugin..."

          # Build the project using the correct scheme name
          xcodebuild -project Builds/MacOSX/Pulse24Sync.xcodeproj -configuration Release -scheme "Pulse24Sync - All"

          if [ $? -ne 0 ]; then
            echo "Build failed"
            exit 1
          fi

          echo "Build completed successfully"

      - name: Show cached build status
        if: steps.check-cache.outputs.cache-hit == 'true'
        run: |
          echo "âš¡ Using cached build artifacts - skipped compilation"
          echo "ðŸ“¦ Cached artifacts:"
          find Builds/MacOSX/build/Release/ -name "*.vst3" -o -name "*.component" -o -name "*.app" 2>/dev/null || echo "  (artifacts found in cache)"

      - name: Cleanup macOS build artifacts
        if: always()
        run: |
          # Clean up temporary files but preserve cache
          find . -name "*.tmp" -o -name "*.temp" -o -name "*~" -type f -delete 2>/dev/null || true
          find . -name ".DS_Store" -type f -delete 2>/dev/null || true

      - name: Upload macOS build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-builds
          path: Builds/MacOSX/build/Release/

  build-windows:
    runs-on: Windows
    if: true  # Enabled for Windows builds
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Cache JUCE and Projucer files
      - name: Cache JUCE and Projucer files
        uses: actions/cache@v4
        with:
          path: |
            Builds/
            JuceLibraryCode/
          key: ${{ runner.os }}-juce-projucer-${{ hashFiles('Pulse24Sync.jucer', 'Source/**') }}
          restore-keys: |
            ${{ runner.os }}-juce-projucer-

      # Cache Visual Studio build artifacts
      - name: Cache Visual Studio build artifacts
        uses: actions/cache@v4
        with:
          path: |
            Builds/VisualStudio2022/x64/Release/
            Builds/VisualStudio2022/.vs/
          key: ${{ runner.os }}-vs-${{ hashFiles('Source/**', 'Pulse24Sync.jucer') }}
          restore-keys: |
            ${{ runner.os }}-vs-

      - name: Check for cached build
        id: check-cache
        shell: powershell
        run: |
          if (Test-Path "Builds\VisualStudio2022\x64\Release\Pulse24Sync.vst3\Contents\x86_64-win\Pulse24Sync.vst3") {
            Write-Output "cache-hit=true" >> $env:GITHUB_OUTPUT
            Write-Host "âœ… Found cached Windows build artifacts"
          } else {
            Write-Output "cache-hit=false" >> $env:GITHUB_OUTPUT
            Write-Host "ðŸ”¨ No cached build found, proceeding with full build"
          }

      - name: Setup JUCE and Projucer
        if: steps.check-cache.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          # Set execution policy and run our script
          Set-ExecutionPolicy -ExecutionPolicy Bypass -Scope Process -Force

          # Use pre-installed JUCE at c:\JUCE
          Write-Host "Using pre-installed JUCE at c:\JUCE"

          # Check if Projucer exists at the expected location
          $projucerPath = "c:\JUCE\Projucer.exe"
          if (Test-Path $projucerPath) {
            Write-Host "Found Projucer at: $projucerPath"
          } else {
            # Try alternative locations
            $alternativePaths = @(
              "c:\JUCE\extras\Projucer\Builds\VisualStudio2022\x64\Release\Projucer.exe",
              "c:\Program Files\JUCE\Projucer.exe",
              "c:\Program Files (x86)\JUCE\Projucer.exe"
            )

            foreach ($path in $alternativePaths) {
              if (Test-Path $path) {
                $projucerPath = $path
                Write-Host "Found Projucer at: $projucerPath"
                break
              }
            }
          }

          if (!(Test-Path $projucerPath)) {
            Write-Error "Projucer not found. Please ensure JUCE is installed at c:\JUCE"
            exit 1
          }

          # Only regenerate if cached files don't exist
          if (!(Test-Path "Builds\VisualStudio2022")) {
            # Generate Visual Studio project with Projucer
            Write-Host "Generating Visual Studio project files..."
            & $projucerPath --resave Pulse24Sync.jucer

            # Note: Projucer may return non-zero exit code even on success
            # So we check if files were actually created instead
            Write-Host "Projucer completed. Waiting for files to be written..."

            # Give Projucer time to finish writing files
            Start-Sleep -Seconds 3

            Write-Host "Checking if files were created..."

            # Check multiple possible locations for the solution file
            $possiblePaths = @(
              "Builds\VisualStudio2022\Pulse24Sync.sln",
              "Builds\VisualStudio2022\x64\Release\Pulse24Sync.sln",
              "Builds\VisualStudio2022\Release\Pulse24Sync.sln"
            )

            $solutionFound = $false
            foreach ($path in $possiblePaths) {
              if (Test-Path $path) {
                Write-Host "Found Visual Studio solution at: $path"
                $solutionFound = $true
                break
              }
            }

            if (!$solutionFound) {
              Write-Host "Checking what files were actually created in Builds directory:"
              if (Test-Path "Builds") {
                Get-ChildItem -Path "Builds" -Recurse -Name | Write-Host
              } else {
                Write-Host "Builds directory does not exist"
              }
              Write-Error "Visual Studio solution file was not created"
              exit 1
            }

            Write-Host "Project files generated successfully"
          } else {
            Write-Host "âœ… Using cached Visual Studio project files"
          }

      - name: Build Windows Plugin
        if: steps.check-cache.outputs.cache-hit != 'true'
        shell: cmd
        run: |
          echo Building Pulse24Sync plugin...

          REM Use Visual Studio Developer Command Prompt to access MSBuild
          call "C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\Tools\VsDevCmd.bat"

          REM Build the project
          msbuild Builds\VisualStudio2022\Pulse24Sync.sln /p:Configuration=Release /p:Platform=x64 /m

          if %ERRORLEVEL% neq 0 (
            echo Build failed
            exit /b 1
          )

          echo Build completed successfully

      - name: Show cached build status
        if: steps.check-cache.outputs.cache-hit == 'true'
        shell: powershell
        run: |
          Write-Host "âš¡ Using cached build artifacts - skipped compilation"
          Write-Host "ðŸ“¦ Cached artifacts:"
          $artifacts = Get-ChildItem -Path "Builds\VisualStudio2022\x64\Release\" -Recurse -Include "*.vst3", "*.exe" -ErrorAction SilentlyContinue
          if ($artifacts) {
            $artifacts | ForEach-Object { Write-Host "  $($_.Name)" }
          } else {
            Write-Host "  (artifacts found in cache)"
          }

      - name: Cleanup Windows build artifacts
        if: always()
        shell: powershell
        run: |
          # Clean up temporary files but preserve cache
          Get-ChildItem -Path . -Recurse -Include @("*.tmp", "*.temp", "*~", "Thumbs.db", "ehthumbs.db") -Force | Remove-Item -Force -ErrorAction SilentlyContinue

      - name: Upload Windows build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-builds
          path: |
            Builds/VisualStudio2022/x64/Release/
            Builds/VisualStudio2022/build/Release/
